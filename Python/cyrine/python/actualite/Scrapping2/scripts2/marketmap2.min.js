function TraceTreeMap(n) {
    for (var w = function(n, i, r, u, f) {
        if (!f.nodes || f.nodes.length == 0) {
            var e = {
                x: Math.round(n),
                y: Math.round(i),
                width: Math.round(r) + .5,
                height: Math.round(u) + .5,
                fill: f.color,
                text: f.data,
                svar: f.svar.toFixed(2),
                sector: f.sector,
                Ticker: f.Ticker,
                last: f.last,
                weight: f.sw
            };
            t.push(e)
        }
    }, t = [], f = {}, y, s, h, u, b = n.length, o, e, r, a, v, i = 0; i < b; i++)
        y = n[i].Name,
        s = n[i].Capi,
        h = n[i].Var,
        u = "main",
        f[u] || (f[u] = {
            data: u,
            nodes: []
        }),
        f[u].nodes.push({
            weight: s,
            data: y,
            color: ColorInterpolator(h),
            svar: h,
            sector: n[i].ICB1,
            Ticker: n[i].Ticker,
            last: n[i].Last,
            sw: s
        });
    o = VNA.gi("containerMMAP");
    o.innerHTML = "";
    e = document.createElement("canvas");
    e.id = "canvasmain";
    e.setAttribute("class", "cp");
    o.appendChild(e);
    var c = e
      , l = parseInt(window.getComputedStyle(o).width) - 8
      , p = Math.round(l * 2 / 3);
    c.width = l;
    c.height = p;
    r = c.getContext("2d");
    a = {
        frame: {
            x: 0,
            y: 0,
            width: l,
            height: p
        },
        nodes: []
    };
    for (u in f)
        a.nodes.push(f[u]);
    for (treemap.minFontSize = function() {
        return 10
    }
    ,
    treemap.squarify(a, w),
    v = t.length,
    r.strokeStyle = "#fff",
    i = 0; i < v; i++)
        r.beginPath(),
        r.rect(t[i].x, t[i].y, t[i].width, t[i].height),
        r.stroke(),
        r.fillStyle = t[i].fill,
        r.fill();
    for (r.fillStyle = "#fff",
    i = 0; i < v; i++)
        t[i].width > 30 && r.wrapText(t[i].text, t[i].x + 3, t[i].y + 12, t[i].width - 4, 16);
    VNA.gi("canvasmain").addEventListener("mousemove", function(n) {
        for (var e = offset(this), f = parseInt(n.pageX - e.left), o = parseInt(n.pageY - e.top), u = "", r, s, h, c, i = 0; i < t.length; i++)
            if (f >= t[i].x && f <= t[i].x + t[i].width && o >= t[i].y && o <= t[i].y + t[i].height) {
                u = t[i].text;
                break
            }
        r = VNA.gi("mapStick");
        u != "" ? (s = t[i].svar < 0 ? "quote_down" : "quote_up",
        h = t[i].svar > 0 ? "+" : "",
        u = "<b>" + t[i].text + "<\/b><br>" + formatMillier(t[i].last) + ' TND <span class="' + s + ' ml10">' + h + t[i].svar + "%<\/span><br>Capitalisation: " + formatMillier(t[i].weight / 1e3, 2) + " MTND",
        r.innerHTML = u,
        r.style.top = n.pageY + 5 + "px",
        c = f < 400 ? n.pageX + 5 : n.pageX - 150,
        r.style.left = c + "px",
        r.style.display = "block") : r.style.display = "none"
    });
    VNA.gi("canvasmain").addEventListener("mouseleave", function() {
        VNA.gi("mapStick").style.display = "none"
    });
    VNA.gi("canvasmain").addEventListener("click", function(n) {
        for (var u = offset(this), f = parseInt(n.pageX - u.left), e = parseInt(n.pageY - u.top), r, i = 0; i < t.length; i++)
            if (f >= t[i].x && f <= t[i].x + t[i].width && e >= t[i].y && e <= t[i].y + t[i].height) {
                r = t[i].Ticker;
                break
            }
        r && r != "" && window.open("/marches/cotation_" + r, "_blank")
    })
}
function offset(n) {
    if (!n.getClientRects().length)
        return {
            top: 0,
            left: 0
        };
    var t, i;
    return t = n.getBoundingClientRect(),
    i = n.ownerDocument.defaultView,
    {
        top: t.top + i.pageYOffset,
        left: t.left + i.pageXOffset
    }
}
function ColorInterpolator(n) {
    var t, i = Math.abs(n - n % 1), r = Math.abs(n % 1);
    switch (i) {
    case 0:
        t = 70;
        break;
    case 1:
        t = 100;
        break;
    case 2:
        t = 130;
        break;
    case 3:
        t = 160;
        break;
    case 4:
        t = 190;
        break;
    case 5:
        t = 220;
        break;
    default:
        t = 255
    }
    return t = t + Math.round(30 * r),
    t > 255 && (t = 255),
    n >= 0 ? "rgba(0, " + t + ", 0 ,1)" : "rgba(" + t + ", 0, 0,1)"
}
function getCAC40Data(n) {
    var t = new XMLHttpRequest;
    t.open("GET", "/api/charting/GetMarketMapShares?length=" + n + "&market=tn", !0);
    t.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
    t.onload = function() {
        if (t.status >= 200 && t.status < 400) {
            var n = JSON.parse(t.responseText);
            n != null && TraceTreeMap(n)
        }
    }
    ;
    t.send()
}
var treemap;
!function(n) {
    var t = function() {
        function n(n, t) {
            this.weight = 0;
            this.frame = {
                x: 0,
                y: 0,
                width: 0,
                height: 0
            };
            this.weight = n;
            this.data = t
        }
        return n.weigh = function(n) {
            var r = [], f = [], i, e, t, u, s, o;
            for (n.level = 0,
            f.push(n); f.length > 0; )
                if (i = f.pop(),
                r[i.level] || (r[i.level] = []),
                r[i.level].push(i),
                i.nodes)
                    for (t = 0; t < i.nodes.length; ++t)
                        e = i.nodes[t],
                        e.level = i.level + 1,
                        e.parent = i,
                        f.push(e);
            for (t = r.length - 2; t >= 0; --t)
                for (u = 0; u < r[t].length; ++u) {
                    for (s = 0,
                    o = 0; o < r[t][u].nodes.length; ++o)
                        s += r[t][u].nodes[o].weight;
                    r[t][u].weight = s
                }
        }
        ,
        n
    }();
    n.InternalNode = t
}(treemap || (treemap = {}));
!function(n) {
    function i(n) {
        return .1 * (n.width + n.height)
    }
    function r() {
        return 8
    }
    function u(n, t) {
        var i = this.minFontSize(n)
          , r = this.maxFontSize(n);
        return Math.max(i, (t.width + t.height) / (n.width + n.height) * r)
    }
    function t() {
        return .05
    }
    function f(n) {
        return t() * n.width
    }
    function e(n) {
        return t() * n.height
    }
    var o = function() {
        function n() {}
        return n
    }();
    n.Size = o;
    n.maxFontSize = i;
    n.minFontSize = r;
    n.fontSize = u;
    n.tileMarginPercentage = t;
    n.xMargin = f;
    n.yMargin = e
}(treemap || (treemap = {}));
!function(n) {
    function t(t, r) {
        var f, o, u, e;
        for (n.InternalNode.weigh(t),
        f = [],
        f.push(t); f.length > 0; )
            if (u = f.shift(),
            u.nodes && u.nodes.length > 0)
                for (i.squarify(u.nodes, u.frame.width, u.frame.height, function(n, t, i, r, f) {
                    f.frame = {
                        x: u.frame.x + n,
                        y: u.frame.y + t,
                        width: i,
                        height: r
                    }
                }),
                e = 0; e < u.nodes.length; ++e)
                    o = u.nodes[e],
                    o.nodes && o.nodes.length > 0 && f.push(o);
        for (f.push(t); f.length > 0; )
            if (u = f.pop(),
            r(u.frame.x, u.frame.y, u.frame.width, u.frame.height, u),
            u.nodes)
                for (e = 0; e < u.nodes.length; ++e)
                    f.push(u.nodes[e])
    }
    var i = function() {
        function t() {}
        return t.squarify = function(t, i, r, u) {
            var s = t.slice(0), c;
            this.scaleWeights(t, i, r);
            s.sort(function(n, t) {
                return t.weight - n.weight
            });
            s.push(new n.InternalNode(0,null));
            for (var h = i > r, l = h ? r : i, k = 0, d = 0, a = i, v = r, f = []; s.length > 0; ) {
                var g = s[0]
                  , y = g.weight
                  , p = this.sum(f)
                  , nt = this.min(f)
                  , tt = this.max(f)
                  , it = this.worst(p + y, Math.min(nt, y), Math.max(tt, y), l)
                  , rt = this.worst(p, nt, tt, l);
                if (0 == f.length || rt > it)
                    f.push(g),
                    s.shift();
                else {
                    for (var w = k, b = d, e = p / l, o = 0; o < f.length; ++o)
                        c = f[o].weight / e,
                        h ? (u(w, b, e, c, f[o]),
                        b += c) : (u(w, b, c, e, f[o]),
                        w += c);
                    h ? (k += e,
                    a -= e) : (d += e,
                    v -= e);
                    h = a > v;
                    l = h ? v : a;
                    f = []
                }
            }
        }
        ,
        t.worst = function(n, t, i, r) {
            return Math.max(r * r * i / (n * n), n * n / (r * r * t))
        }
        ,
        t.scaleWeights = function(n, t, i) {
            for (var u = t * i / this.sum(n), r = 0; r < n.length; r++)
                n[r].weight = u * n[r].weight
        }
        ,
        t.max = function(n) {
            return Math.max.apply(Math, this.weights(n))
        }
        ,
        t.min = function(n) {
            return Math.min.apply(Math, this.weights(n))
        }
        ,
        t.sum = function(n) {
            for (var i = 0, t = 0; t < n.length; ++t)
                i += n[t].weight;
            return i
        }
        ,
        t.weights = function(n) {
            return n.map(function(n) {
                return n.weight
            }, n)
        }
        ,
        t
    }();
    n.squarify = t
}(treemap || (treemap = {}));
CanvasRenderingContext2D.prototype.wrapText = function(n, t, i, r, u) {
    r < 50 ? (this.font = "10px Arial",
    u = u - 4) : r < 100 ? (this.font = "11px Arial",
    u = u - 2) : this.font = "12px Arial";
    for (var c = n.split("\n"), e = "", l, h, a, v, f, o, y = c.length, s = 0; s < y; s++) {
        for (o = c[s].split(" "),
        l = o.length,
        f = 0; f < l; f++)
            h = e + o[f] + " ",
            a = this.measureText(h),
            v = a.width,
            v > r && f > 0 ? (this.fillText(e, t, i, r),
            e = o[f] + " ",
            i += u) : e = h;
        this.fillText(e, t, i, r);
        i += u
    }
}
;
getCAC40Data("intra");
VNA.gi("duree").addEventListener("change", function() {
    getCAC40Data(this.value)
});
